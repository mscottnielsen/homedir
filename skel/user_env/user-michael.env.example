#!/bin/bash
# group env files to load (org-{name}.env, sourced in order listed)
USER_ORG=${USER_ORG},oradev,goldengate,dev

# database (test/demo user)
export ORA_USER ORA_PASS
: ${ORA_USER:="test001"}
: ${ORA_PASS:=${ORA_USER}}

# e.g., perforce
# http://www.perforce.com/perforce/doc.082/manuals/cmdref/env.P4CONFIG.html
#export P4CONFIG=p4config
#export P4USER=username

# print ip address(es)
alias ifconf="ifconfig | egrep '^[^ ]|inet.*add'"

export LESS="-ReXF"

# shared folder for user/group software (very old / obsolete)
export S=${S:-"/net/nas001/export/Public/"}; [ -d "$S" ] || S=/tmp

if [ -d "$S/opt/" ]; then
  export OPT_DIR="$S/opt"
  export OPT_PLATFORM_DIR="$OPT_DIR/platform/${h_os}/${h_arch_name}"

  [ -d "$OPT_DIR/bin" ] && PATH="$PATH:$OPT_DIR/bin"
  [ -d "$OPT_PLATFORM_DIR/bin" ] && PATH="$PATH:$OPT_PLATFORM_DIR/bin"

  [ -z "$ANT_HOME"    -a -d "$OPT_DIR/ant"    ] && export ANT_HOME=${ANT_HOME:-"$OPT_DIR/ant"}
  [ -z "$SVNKIT_HOME" -a -d "$OPT_DIR/svnkit" ] && export SVNKIT_HOME=${SVNKIT_HOME:-"$OPT_DIR/svnkit"}
  [ -z "$CMAKE_HOME"  -a -d "$OPT_DIR/cmake"  ] && export CMAKE_HOME=${CMAKE_HOME:-"$OPT_DIR/cmake"}
  [ -z "$JBOSS_HOME"  -a -d "$OPT_DIR/jboss"  ] && export JBOSS_HOME=${JBOSS_HOME:-"$OPT_DIR/jboss"}
  [ -z "$MAVEN_HOME"  -a -d "$OPT_DIR/maven"  ] && export MAVEN_HOME=${MAVEN_HOME:-"$OPT_DIR/maven"}
  [ -z "$STAF_HOME"   -a -d "$OPT_PLATFORM_DIR/staf" ] && export STAF_HOME=${STAF_HOME:-"$OPT_PLATFORM_DIR/staf"}

  if ! type git >/dev/null 2>&1
  then
    [ -d "$OPT_PLATFORM_DIR/git/bin" ] && PATH="$PATH:$OPT_PLATFORM_DIR/git/bin"
  fi
fi

# Unsetting JAVA_HOME if set to jdk1.4 (due to some problematic /etc/profile's)
echo "$JAVA_HOME" | egrep -i "j[a-z0-9]*1\.4" >/dev/null && unset JAVA_HOME

############################################################################
[ ${HOMEDIR_BIN_COMMON_LOG_INIT:-0} -eq 0 ] && source $HOMEDIR_BIN/common/log.sh >> $HOMEDIR_LOG 2>&1

_user_env_log() {
  #local LOG_LEVEL=DEBUG
  log "$@"
}

############################################################################
# bash completion for psx, killall, etc
[ -f   $HOMEDIR_BIN/completion/bash_completion_psx ] \
  && . $HOMEDIR_BIN/completion/bash_completion_psx >> $HOMEDIR_LOG 2>&1

# use hosts files to complete hostnames for ssh
[ -f   $HOMEDIR_BIN/completion/bash_completion_ssh ] \
  && . $HOMEDIR_BIN/completion/bash_completion_ssh >> $HOMEDIR_LOG 2>&1

############################################################################
print_path(){
  old=$IFS
  IFS=:
  printf "%s\n" $PATH
  IFS=$old
}

############################################################################
# ADE (happily ignore if you've never heard of 'ade')
export ORAREVIEW_NO_MANAGER=1
export ORAREVIEW_REVIEWERS="mike.nielse@oracle.com"

# Override os-linux-*.env to be ADE-aware: handle symlinks and hidden dirs
# usage:  find $find_follow_ade_sym ...
export find_follow_ade_sym=" -follow -name .ade_path -prune -o "

############################################################################
# Find files, ignoring .svn/.git/etc (for corresponding "diff", see diffr).
f() {
  local dirs="" default_action="-print"
  for x ; do # loop until an option (starts w/ "-")
    [ "${x:0:1}" = "-" ] && break
    dirs="${dirs} ${x}"
    shift
  done

  # if excluding paths w/ prune, the normally optional "-print" is required
  [ $# -ne 0 ] && default_action=""

  # ignore .ade/.svn/.git/CVS; use "$@" if wildcards match files in pwd
  find ${dirs:=.} \
    $find_follow_ade_sym \
    \(  ! -regex ".*/\.[asg][dvi][ent].*" -a ! -regex ".*/CVS.*" \) $default_action "$@"
}

############################################################################
# findn (find-name), find a file of the given name using "find"
# usage:
#  findn [directory...] filename [-option1 etc -option2 etc...]
#
findn() {
  local dirs="" default_action="-print"
  for x ; do # loop until an option (starts w/ "-")
    [ "${x:0:1}" = "-" ] && break
    [ -d "${x}" ] && dirs="${dirs} ${x}" && shift
  done

  # if excluding paths w/ prune, the normally optional "-print" is required
  [ $# -ne 0 ] && default_action=""

  find ${dirs:=.} $find_follow_ade_sym -name "$@" $default_action
}


############################################################################
# Search through jar files for a given pattern (ie, a filename).
# Usage: findj [paths|jars] pattern
# Examples:
#    find class in some pkg:   findj ~/.m2/repo*  ObjectFactory.class
#    find pkg name (from pwd)  findj javax/jmx
#    case insensitive:         findj -i javax/JMX
#    ..and "quiet" grep:       findj . -iq javax/JMX
#
findj () {
  local pattern paths opts
  [ $# -eq 0 ] && echo "usage: findj [paths] [pattern]" && return 2
  [ $# -eq 1 ] && paths=. && pattern="$@" && shift

  for x ; do
    [ "$#" -eq 1 ] && pattern="$@" && break
    [ "$x" = "--" ] && shift && pattern="$@" && break
    [ "${x:0:1}" = "-" ] && opts="$x" && shift && pattern="$@" && break
    paths="$paths $x" && shift
  done

  for x in $(find $paths $find_follow_ade_sym -name "*.jar" -print)
  do
     unzip -l -qq "$x" | egrep $opts $pattern
     local found=$?
     [ $found -eq 0 ] && echo "FOUND: $x     $pattern"
  done
}


############################################################################
# finds - (find-string) find a string in a file using "find"
#  Usage: finds [search-dirs] [egrep-options] [pattern]
#  Example: finds include src -i "something"
#  Returns:
#     foo.c: SomeThing
#
finds () {
 local dirs=
 for x
 do   # iterate, until it looks like we have an option (starts w/ "-")
    [ "${x:0:1}" = "-" ] && break
    [ -d "${x}" ] && dirs="${dirs} ${x}" && shift
 done

 find ${dirs:=.} \
    $find_follow_ade_sym \
    \( -type f -o -type l \) \
    \( ! -name "*~" \) \
    -exec egrep "$@" {} \; \
    -print
}

# usage: finds [egrep-opts] searchstring
#function finds {
#  find . -type f -exec egrep "$@" {} \; -print ;
#}

############################################################################
# findsrc - run "find" for source files, doing an 'egrep' on all found files.
#  Usage: findsrc [search-dirs] [egrep-options] [pattern]
#  Example: findsrc include src -i "something"
#  Returns:
#     foo.c: SomeThing
#     Bar.java: someThing
#
findsrc () {
  local dirs="" x=""
  for x ; do # loop until an option (starts w/ "-")
     [ "${x:0:1}" = "-" ] && break
     [ -d "${x}" -o -f "${x}" ] && dirs="${dirs} ${x}" && shift
  done

  find ${dirs:=.} \
     $find_follow_ade_sym \
     \( -type f -o -type l \) \
     \( -name "*.java" -o -name "*.[chCH]"  -o -name "*.[Cc][Cc]" -o -name "*.c[xp][xp]" -o -name "*.xml" -o -name "*.prop*s" -o -name "*.prm"  \) \
     -exec egrep "$@" {} \; \
     -print
 }

# return status
:

