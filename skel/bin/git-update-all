#!/bin/bash
##
## For all local branches, check-out and pull (fetches & merges).
## if it can't fast-forward one of the branches, it stops processing
## at that point. Returns the current working state to the same branch
## we started on.
##
git_update_all() {
  local opt OPTIND OPTARG
  local run=
  #local run="echo"  # debug
  local pullopt="--ff-only" do_status=false do_continue=true
  local br=$(git name-rev --name-only HEAD 2>/dev/null)

  usage() { cat<<EOF
    Usage: git update-all [-h|-n|-r|-s]
      -h   print usage and return
      -n   dry-run, only print the git-pull command to execute. Does run
               the git checkout/status. Output can be used as a script.
      -r   git pull --rebase (default is --fast-forward)
      -s   also print branch status
    Update all local branches (git checkout/pull fast-forward). If successful,
    working tree is returned to original branch (currently: $br).
    This is a custom git extension script: ${BASH_SOURCE[0]}
EOF
    return 0
  }

  git_status() {
      $do_status && git status 2>&1 | sed 's/^/# /'
      return 0
  }

  while getopts hnrs opt; do
    case "$opt" in
      h) usage; return 0;;
      n) run=echo;;
      r) pullopt="--rebase";;
      s) do_status=true;;
      *) usage ; return 2;;
    esac
  done; shift $((OPTIND-1)); OPTIND=1

  echo "# === starting from branch: $br"
  for x in $( git branch | cut -c3- )
  do
     printf "\n# === ${x}   (continue? $do_continue)\n"
     $do_continue \
        && git checkout "$x" \
        && git_status \
        && $run git pull $pullopt || do_continue=false
  done

  $do_continue \
      && printf "\n# === return to branch: \"$br\"\n" \
      && [ ${#br} -gt 0 ] \
      && $run git checkout $br
}

git_update_all "$@"

