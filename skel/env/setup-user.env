###############################################################################
# env var's and defaults:
#   $HOMEDIR_ENV (~/env)  -- generic env config
#   $HOMEDIR_BIN (~/bin)  -- shared scripts, bash completion
#   $HOMEDIR_USER_ENV (~/user_env) -- per-user env settings
#   $HOMEDIR_HOST_ENV (~/host_env) -- per-host env settings

# local.env (the only *unversioned* env file) is in $HOME (historically, was in $HOMEDIR_ENV)
[ -e $HOME/local.env ] && LOCAL_ENV=$HOME/local.env || LOCAL_ENV=$HOMEDIR_ENV/local.env

h_log "  " "HOMEDIR=$HOMEDIR HOMEDIR_ENV=$HOMEDIR_ENV HOMEDIR_BIN=$HOMEDIR_BIN LOCAL_ENV=$LOCAL_ENV HOMEDIR_USER_ENV=$HOMEDIR_USER_ENV HOMEDIR_HOST_ENV=$HOMEDIR_HOST_ENV\n"


###############################################################################
[ ${HOMEDIR_BIN_COMMON_LOG_INIT:-0} -eq 0 ] && source $HOMEDIR_BIN/common/log.sh >> $HOMEDIR_LOG 2>&1

setup_user_log() {
  #local LOG_LEVEL=DEBUG
  log "$@"
}

###############################################################################
# source the given env file, log errors & elapsed time
setup_user_load() {
  local envf=$1
  local ts_lap=$(h_tstamp)
  local var=${envf//[^a-zA-Z]/_}
  local val=${!var}

  if [ "${val:-0}" -ne 0 ]; then
    setup_user_log DEBUG "...already loaded: $envf ($var=$val)"
    return 0
  fi

  eval "${envf//[^a-zA-Z]/_}=1"
  #eval "export ${envf//[^a-zA-Z]/_}=1"

  if [ -f "$envf" ]; then
    setup_user_log DEBUG "...loading: $envf"
    printf "   loading \"$envf\"" >> $HOMEDIR_LOG
    . $envf || printf "   (**error ($?): \"$envf\")" >> $HOMEDIR_LOG
    printf " ($(( $(h_tstamp) - ts_lap ))sec)\n" >> $HOMEDIR_LOG
  elif [ ${#VERBOSE} -gt 0 ]; then
    setup_user_log DEBUG "...not found: $envf"
    printf "   **warning: \"$envf\" does not exist. ($(( $(h_tstamp) - ts_lap ))sec)\n" >> $HOMEDIR_LOG
  fi
}

###############################################################################
# Set env per-user/host/OS (only local.env is unversioned). Init order:
#  * local.env-> .aliases-> user-*.env-> org-*.env-> host-*.env-> os-*.env
# Notes:
#  * earlier settings can optionally be overridden
#    - to optionally set foo =>  : ${foo:="some_value"})
#  * ~/.aliases => cross-platform generic aliases/functions (for all users)
#  * user-$LOGNAME.env, host-$HOSTNAME.env => per-user/host settings
#  * host-{fqdn}.env => if exists, sourced before host-{name}.env
#  * set USER_ORG in local.env or user-*.env to use org-${USER_ORG}.env
#    - can set multiple orgs using => USER_ORG=one,two,three
#    - loads in order: org-one.env, org-two.env, org-three.env
#  * os-*.env => generic OS-wide settings (Linux/Solaris/AIX/Cygwin/etc)
#  * if login errors, check $HOMEDIR_LOG (~/.h_log) or ~/.xsession-errors

# to add to list of user-org's: USER_ORG=${USER_ORG},oradev,foobar
export USER_ORG=default

setup_user_log DEBUG "====setup user env"
setup_user_load $LOCAL_ENV
setup_user_load $HOMEDIR/.aliases
setup_user_load $HOMEDIR_USER_ENV/user-${LOGNAME:-"$USER"}.env

# may source multiple user-*.env files
setup_user_log DEBUG "   LOGNAME=$LOGNAME (USER=$USER); USER_ORG=$USER_ORG"
for f in $(eval echo $HOMEDIR_USER_ENV/org-{"${USER_ORG}"}.env) ; do
  setup_user_load $f
done

setup_user_load $HOMEDIR_HOST_ENV/host-${h_host}.${h_domain:-"local"}.env
setup_user_load $HOMEDIR_HOST_ENV/host-${h_host}.env
setup_user_load $HOMEDIR_ENV/os-${h_os}.env

h_log "user, host, os env loaded\n"

# return status
:

