#!/bin/bash
#
# Maintain a list of frequently used directories, with commands to add to the
# list, edit the list, search the list by pattern, and easily chdir into one
# of these saved directories.
#
# Usage:
#   $ setwk            # add $PWD to the list of saved directories.
#
#   $ cdw {pattern}    # cd into the saved directory matching the given
#                      #   pattern, the most recently saved match.
#
#   $ listw {pattern}  # show existing working dirs matching the pattern
#
#   $ editw            # use $EDITOR to edit directory list
#
#   $ cdw {pattern} {prefix1} {prefix2}
#                   # cd to the saved directory matching {pattern}, then
#                   #   into the subdirectories matching the given prefixes,
#                   #   i.e:  cd *{pattern}*/prefix1*/prefix2*

############################################################################
# list of saved dirs (previously used .workrc; now use .workrcd/*)
export WORKRC=~/.workrcd/${h_host:-$(hostname)}.workrc
export WORKRC_DEFAULT=~/.workrcd/default.workrc

mkdir -p ${WORKRC%/*}
# use a generic workrc until a real one is used (don't autocreate $WORKRC)
[ ! -f $WORKRC_DEFAULT ] && pwd > $WORKRC_DEFAULT

############################################################################
get_workrc_default () {
  [ ! -f "$WORKRC_DEFAULT" ] && touch $WORKRC_DEFAULT
  echo $WORKRC_DEFAULT
}

############################################################################
# get the file containing the list of saved directories; if not found, return
# the default list. NOTE: Do *not* use this to return the file to *write* to,
# but rather the file to read from.
get_workrc () {
  [ -f "$WORKRC" ] && echo $WORKRC || get_workrc_default
}

############################################################################
# chdir to directory, given approximate path(s), using wildcards to complete.
# Usage:  cdto basepath [pattern ...]
# Example:
#  $ cdto /some/dir apple berry choc don
#      add wildcard => cd /some/dir/apple/berry/choc*/don*/
#      expands to   => cd /some/dir/apple/berry/chocolate/donuts/
#  Notes:
#    * append wildcard (*) to directories that are not an exact match ('apple'
#       and 'berry' do exist; 'choc' and 'don' do not, so use: choc* and don*)
#    * if match multiple directories match, 'cd' into the first match
#
cdto () {
  usage() { cat<<EOF
  Usage: cdto path pattern pattern ...
    cd to a previously saved directory matching the given pattern(s); e.g,
    "*path*/pattern1*/pattern2*". The pattern can include meta chars (*, ?).
    The first match is used, but all matches are displayed.
    Use 'listw {pattern}' to list stored paths, and 'editw' to edit the list.
EOF
    return 0
  }

  list_dirs() {
    find ${1} -follow -type d -prune 2>/dev/null
  }

  [ $# -lt 1 ] && { usage; return 2; }
  local x firstDir tmp p=$1
  shift

  for x in "$@"; do          # Note: [[...]] acts as quotes, prevents expansion.
    if [[ -d $p/$x ]]; then  # If path exists and is dir, don't use wildcarding,
      p="${p}/${x}"          #  add to list of directory matches.
    else                     # else, since the exact path doesn't exist,
      p="${p}/${x}*"         #  add a wildcard to the end of the path
    fi
  done

  echo "pattern: $p"          # if $p is unquoted, expand metachars to full path
  echo "matches: $(list_dirs $p | tr '\n' ',')"

  if [[ -d $p ]]; then        # if dir exists (e.g., "foobar") then cd into it;
    firstDir=$p               # else it is a pattern (e.g., "foo*"),
  else                        # find the first directory in the path
    firstDir=$(list_dirs $p | head -1)
    echo "first matching directory: $firstDir"
  fi
  cd "$firstDir"
}

############################################################################
# chdir into home [ pattern ] [ pattern ... ]
cdh () { cdto "$HOME" "$@"; }

############################################################################
# List the current saved 'working directories'. If a directory in the list
# no longer exists, it's printed with a "#" prefix.  Options:
#   -q   - omit missing directories completely from the results
listw () {
  local d pat print_missing=true

  usage() { cat<<EOF
    Usage:  listw [-c] [pattern1] [pattern2...]
    Show existing saved working directories matching the given pattern.
    Using option "-c" simply calls: cdw {args}
EOF
    return 0
  }

  printdir() {
    local line
    while read line; do
      if [ -d "$line" ]; then
        printf "${line}\n"
      elif $print_missing ; then
        printf "#${line}\n"
      fi
    done
    return 0
  }

  [ $# -gt 0 -a "$1" = "-q" ] && print_missing=false && shift
  [ $# -gt 0 -a "$1" = "-c" ] && shift && cdw "$@"
  [ $# -gt 0 -a "$1" = "-h" ] && usage && return 1

  if [ $# -gt 0 ]; then
    d=( $@ )
    pat=$(for x in ${d[@]}; do  printf "${x}.*"; done)
    egrep "$pat" $(get_workrc) | printdir
  else
    cat $(get_workrc) | printdir
  fi
  return 0
}

############################################################################
# edit the list of current 'working directories' using $EDITOR
editw () {
  ${EDITOR:-vi} $(get_workrc)
}

############################################################################
# Usage: cdw [pattern] [prefix1] [prefix2...]
# Change directory to last working directory set in the WORKRC file.
#    [pattern]    - go to the last directory matching the given pattern
#    [prefix1...] - after going to the directory, try to cd into the
#                    subdirectory matching the given prefix.
#
#   "setwk" adds PWD to the end of the list of working directories
cdw() {
  local wkdir

  usage() { cat<<EOF
  Usage:  cdw [pattern] [prefix1] [prefix2...]
    Search the list of saved working directores for "pattern", then cd into that
    matching directory. If additional arguments are given, attempt to cd further into
    subdirectories, e.g., cd matching_dir/pattern1*/pattern2*
    Use 'listw [pattern]' to list saved working directories, and 'setwk' to add the
    current working directory to the saved list.
EOF
    return 0
  }

  if [ $# -ge 1 ]; then
    [ "$1" = "-h" -o ${1:0:1} = "-" ] && { usage ; return 1; }
    wkdir=$(egrep -- "$1" $(get_workrc) | tail -1)
    shift
  else
    wkdir=$(tail -1 $(get_workrc) )
  fi

  echo "going to work: $wkdir"
  cdto "$wkdir" "$@"
}

############################################################################
# Chdir to the last directory we were in when we last logged out.
# See also: .bash_logout, which writes to .lastdir
cdlastdir () {
  local pat="." lastdir="."
  [ $# -ge 1 ] && pat=$1 && shift
  [ -f $HOME/.lastdir ] \
       && lastdir=$(egrep -- "$pat" $HOME/.lastdir | tail -1) 2>/dev/null \
       || lastdir=$(listw -q "$pat" | tail -1) 2>/dev/null

  echo "going to work: $lastdir"
  cdto "$lastdir" "$@"
}

############################################################################
# Add $PWD to the end of the remembered list
setwk() {
  local wkdir=$PWD
  [ ! -f $WORKRC ] && cat $(get_workrc_default) >> $WORKRC
  echo "$wkdir" >> $WORKRC
  echo "work set to: $wkdir"
}

# return true
:
