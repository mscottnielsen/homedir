#############################################################################
# Initialize GoldenGate command-line wrappers for logdump and ggsci.

#############################################################################
# set/print env, formatted for "eval": eval $( _app_goldengate_printenv )
#
_app_goldengate_printenv() {
  type ${PAGER:="less"} >/dev/null 2>&1 \
    || { type less >/dev/null 2>&1 && PAGER=less ; } \
    || { type more >/dev/null 2>&1 && PAGER=more ; } \
    || { type cat >/dev/null 2>&1 && PAGER=cat ; }

  [ "$PAGER" = "less" -a "$LESS" = "" ] && LESS="-ReXF"

  : ${GGSCI:="./ggsci"}                        # path to ggsci (assume ".")
  : ${GGSCI_SHELL:="bash"}                     # shell for ggsci "sh" commands
  : ${GGSCI_EDITOR:="${EDITOR:-"vim"}"}        # non-GUI editor for ggsci
  : ${GGSCI_PAGER:="${PAGER}"}                 # use "less" (default) or "more"
  : ${LOGDUMP:="./logdump"}                    # path to logdump (assume ".")
  : ${LOGDUMP_CONF:="$HOME/.logdumprc"}        # logdump initialization commands
  : ${RLWRAP:="rlwrap"}                        # rlwrap (found in PATH); only
  type $RLWRAP >/dev/null 2>&1 || RLWRAP=      #   use rlwrap if found

  echo "export GGSCI=\"${GGSCI}\"; "
  echo "export GGSCI_SHELL=\"${GGSCI_SHELL}\"; "
  echo "export GGSCI_EDITOR=\"${GGSCI_EDITOR}\"; "
  echo "export GGSCI_PAGER=\"${GGSCI_PAGER}\"; "
  echo "export LOGDUMP=\"${LOGDUMP}\"; "
  echo "export LOGDUMP_CONF=\"${LOGDUMP_CONF}\"; "
  echo "export RLWRAP=\"${RLWRAP}\"; "
  echo "export PAGER=\"${PAGER}\"; "
  [ "$PAGER" = "less" -o "$GGSCI_PAGER" = "less" ] && echo "export LESS=\"${LESS}\"; "
}

#############################################################################
# Source bash completions if running 'gg' alias to invoke ggsci commands.
# Location of completion script configurable; by default is expected to
# be found in ${HOMEDIR_BIN}/gg (part of the HOMEDIR env).
#
_init_app_goldengate_env() {
  local log=/tmp/log_${LOGNAME}_app-goldengate.env.log
  if [ -e "${BASH_COMPLETION_GG}" ]; then
    . ${BASH_COMPLETION_GG} >> $log 2>&1
  elif [ -e ${GG_CONF_DIR:="${HOMEDIR_BIN}/gg"}/bash_completion_gg ]
  then
    . ${GG_CONF_DIR}/bash_completion_gg >> $log 2>&1
  else
    ( printf "[$(date)] No bash completion enabled for 'gg' alias (GoldenGate ggsci).\n"
      printf "Default script: ${HOMEDIR_BIN}/gg/bash_completion_gg\n" ) >> $log 2>&1
  fi
  return 0
}

#############################################################################
# Run logdump inside rlwrap (if installed). Can also just use the alias "gg", which
# runs ggsci commands, but will run rlogdump if given trail file as an argument.
# Usage: rlogdump [OPEN] trailfile  (the "open" command is optional)
#
rlogdump() {
  local init="ghdr on" cmd=OPEN

  # pass just trial file as argument, or (backwards compatible) "open {file}"
  [ $# -gt 0 -a -e "$1" ] && cmd=OPEN || cmd=""

  # optionally generate completion word list for rlwrap
  # echo 'help'|./logdump|egrep '^[A-Z]' |egrep -v '^Oracle|^Copy|^Version|Logdump' |sed 's/ .*//' |sort -u

  # init logdump (e.g, "ghdr on") in ~/.logdumprc (default: ghdr on)
  [ -e "$LOGDUMP_CONF" ] && init=$(cat "$LOGDUMP_CONF" | egrep -v '^#|^ *$')

  if [ "$RLWRAP" != "" ]; then
     $RLWRAP -c -P "$init" $LOGDUMP $cmd $@
  else
     $LOGDUMP $cmd $@
  fi
}
export rlogdump

#############################################################################
# gg edit param {file} - edit prm and/or property file
#
# Given "gg edit {process}", open the prm and/or property file in dirprm ("param" is optional).
# Either syntax is allowed: "edit foo" OR "edit dirprm/foo.prm"; if using the shorter syntax,
# only existing prm and/or property files are opened.
#
# The files are opened using GGSCI_EDITOR (ex: export GGSCI_EDITOR=gvim)
#
# Examples:
#  gg edit foo        # edit both "dirprm/foo.prm" AND "dirprm/foo.properties", if they already exist
#  gg edit param foo  # same as gg edit foo
#  gg edit dirprm/foo.properties #  edit dirprm/foo.properties (if existing or not)
#
_gg_edit () {
  local ignore='\.exe$|^ *$|:$|^extract$|^gendef$|^defgen$|^ggsci$|^keygen$|^logdump$|^mgr$|^reverse$|^server$|^replicat$|\.so$|\.dll$|~$|\.bak$'
  local args=$(echo "$@" | sed 's/^ *edit *//I; s/^ *params* *//I')
  local ignore_files='|\.exe$|^ *$|:$|^extract$|^gendef$|^defgen$|^ggsci$|^keygen$|^logdump$|^mgr$|^reverse$|^server$|^replicat$|\.so$|\.dll$|~$|\.bak$'
  local files=$(for f in $args
    do
      ls dirprm/${f}.{properties,prm} \
        || ls $f | egrep -v "$ignore" \
        || echo "$f" | grep "/"
    done 2>/dev/null)

  [ "$files" = "" ] \
    &&  echo "** No match: \"${args}\". Create new prm files from ggsci: \"edit param {name}\"" \
    || $GGSCI_EDITOR $files
}

#############################################################################
# Check if file is an 'obey' files, preventing inadvertant execution of a prm
# file when running  "gg obey {file}". Note two types of "obey" are provided:
#  shell> obey foo     # => bash function, runs ggsci commands in the comments
#  shell> gg obey foo  # => run ggsci "obey", the same as: "ggsci> obey foo"
#
_gg_is_obey_file() {
  local args files
  if echo "$@" | egrep -i "^ *obey" >/dev/null
  then
    args=$(echo "$@" | sed 's/^ *obey *//I')
    files=$(for f in $args; do ls $f dirprm/$f 2>/dev/null ; done)
    for f in $files ; do
        egrep -i '^ *extract ' $f >/dev/null 2>&1 \
          && echo "** error: file does not appear to be an obey file (is it a prm file?): $f" \
          && return 2
    done
  fi
  return 0
}

#############################################################################
# Run ggsci or logdump inside rlwrap (if installed). If a file is given as
# an arg, assume logdump is to be run; otherwise run ggsci.
#
gg() {
  # condense ggsci output (use awk to avoid sed limitations on solaris)
  local ggsci_to_ignore=$($GGSCI -v | tr -d '\r' | sed "s/[^A-Za-z0-9]/./g" | awk 'BEGIN{printf "^Copyright "} /./{printf "|^ *%s",$0;next}')
  local pager=$GGSCI_PAGER

  bangify() {
    # add "!" after any "stop manager" command (simple sed)
    sed 's/\([Ss][Tt][Oo][Pp]  *[Mm].*[Gg].*[Rr]\) *!*$/\1!/'
    return 0
  }

  if [ $# -gt 0 -a -e "$1" ]; then
    rlogdump $@
  else
    if [ $# -eq 0 ]; then
      [ "$RLWRAP" != "" ] && printf "** run: $RLWRAP $GGSCI\n"
      $RLWRAP $GGSCI
    else
      echo "$@" | grep -i "^ *view " >/dev/null || pager=cat  # page (more/less) only for "view"
      if echo "$@" | grep -i "^ *edit " >/dev/null ; then     # if "edit", don't invoke ggsci
        _gg_edit "$@"
      else
        _gg_is_obey_file "$@" || return 2
        # Run any ggsci command, strip ggsci banner and everything up to first non-blank line.
        printf "$*\n" | bangify | $GGSCI | egrep -v "$ggsci_to_ignore" |  sed -n '/^[^ ]/,$p' | $pager
      fi
    fi
  fi
}
export gg


#############################################################################
# Look for commands (shell or ggsci) to run in the comments of the prm files:
#   -- example parameter file with comments such as:
#   --   ggsci> add extract ...
#   --   sh> rm dirout/discard.txt
#
# Note: this function is not used to run normal GG "obey" files. For that,
# just use: $ gg obey dirprm/foo.oby
#
# Usage: use the 'obey' function directly from the shell:
#  $ obey dirprm/ggs-script.oby    # Invoking obey scripts from the shell;
#  $ obey dirprm/eora.prm          # execute ggsci comments in prm file,
#  $ obey eora                     # using file name or extract name.
#
# Example of a normal obey file:
#  $ cat bin/ggs-script.oby
#    delete javaue
#    add Extract javaue, ExtTrailSource dirdat/ue, extseqno 0, extrba 0
#    add ExtTrail dirdat/zz, Extract javaue
#  $ obey bin/ggs-script.oby
#
# Example executing ggsci commands in "prm" file:
#  $ more dirprm/eora.prm
#     -- to (re)add  the extract, reading from trail dirdat/aa
#     --   ggsci> add Extract eora, ExtTrailSource dirdat/aa
#     --   ggsci> add ExtTrail dirdat/zz, Extract eora
#     -- commented out ggsci command (use "#"):
#     --   #ggsci> add ExtTrail... (this ggsci command is commented out)
#     --   ggsci> stop mgr!
#     --   ggsci> start mgr
#     --   ggsci> start eora
#     Extract eora
#     SourceDefs dirdef/source.def
#     ...
#  $ obey dirprm/eora.prm
#
_app_goldengate_obeyprm () {
  local ggsci_pattern='^-- *ggsci> *'
  local shell_pattern='^-- *sh> *'
  local tmp_oby use_tmp_oby=false

  if [ "${1:0:1}" = "-" ]; then
    # if this ggsci doesn't handle multiple piped ggsci cmds, resort
    # to running a single obey file with mutliple ggsci commands
    if [ "$1" = "-x" ] ; then
      use_tmp_oby=true
      tmp_oby="/tmp/tmp_${LOGNAME}_$(basename $prm .prm).$$.oby"
      rm -f "$tmp_oby"
    fi
    shift
  fi

  local prm=$1

  run_ggsci() {
    $use_tmp_oby && cat || $GGSCI
  }

  use_tmp() {
    $use_tmp_oby && tee -a $tmp_oby 1>&2 || cat
  }

  run_tmp() {
    $use_tmp_oby && { echo "obey $tmp_oby" | $GGSCI ; rm $tmp_oby; }
  }

  [ ! -e "$prm" ] && echo "** error: file not found: $prm" && return 2
  egrep -i "$ggsci_pattern|$shell_pattern"  $prm  | sed "s/$ggsci_pattern//" | sed "s/$shell_pattern\(.*\)/sh ${GGSCI_SHELL} -c \"\1\"/" | while read line
  do
    sleep 1
    echo "[stderr] $line" 1>&2
    #_gg_is_command "$line" || echo "$line"
    echo "$line" | use_tmp
    echo
  done | run_ggsci
  run_tmp
}

#############################################################################
# Run obey file or ggsci commands; e.g., in prm file: "-- ggsci> add extract..."
# Run script as: "obey dirprm/eora.prm" or "obey eora" (looks for either prm OR oby}
obey () {
  local opt ret=2
  [ "${1:0:1}" = "-" ] && opt=$1 && shift || opt=
  local fname=$1 pname=dirprm/${1}.prm oname=dirprm/${1}.oby

  usage() { cat<<EOF
  Usage: obey [-x] {obey_file.oby | param_file.prm}
    Either run a GoldenGate 'obey' file; OR, given a prm file, run
    the 'ggsci' commands in the comments, e.g:  -- ggsci> info all
    Use option '-x' as a work-around for certain versions of ggsci
    that only process a single ggsci command in a pipe and then exit;
    a temporary obey file will be used instead of a pipe.
EOF
  }

  if [ ! -e "$fname" ]; then   # decide if it's a prm file or oby file
     [ -e "$pname" ] && fname=$pname
     [ -e "$oname" ] && fname=$oname
  fi

  if [ "${fname##*.}" = "oby" ]; then
    printf "run obey file: $fname\n"
    echo "obey $fname" | $GGSCI
    ret=$?
  elif [ "${fname##*.}" = "prm" ]; then
    printf "run ggsci commands (in comments): $fname\n"
    _app_goldengate_obeyprm $opt "$fname"
    ret=$?
  else
    printf "** error: unknown file type / file not found; expecting '*.prm' or '*.oby' file\n\n" 1>&2
    usage
  fi
  return $ret
}
export obey


#############################################################################
# set up the environment

eval $( _app_goldengate_printenv )
_init_app_goldengate_env


