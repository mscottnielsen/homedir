#!/bin/bash
#
# GoldenGate command-line wrappers for logdump and ggsci:
#   gg  => * runs ggsci by default, wrapped in rlwrap (if installed).
#             $ gg
#             ggsci>    # <= "up" arrow works for command recall
#          * or, executes ggsci commands given on the command line; e.g.,
#             $ gg info all
#             $ gg edit param foo    # => use $EDITOR (or $GGSCI_EDITOR)
#             $ gg start mgr
#             $ gg view report foo   # => use $PAGER (or $GGSCI_PAGER)
#          * tab completion for ggsci commands,
#             $ gg st<tab><tab>      => shows commands starting with "st"
#             $ gg start f<tab><tab> => shows e/r processes starting with "f"
#          * logdump is run if given a trail (also wrapped in rlwrap); but first,
#            any initialization commands are run from ~/.logdumprc; eg,
#             $ cat  ~/.logdumprc
#               ghdr on
#               detail on
#             $ gg dirdat/tc000000
#             logdump> ghdr on  # <= automatically run
#             logdump> detail on
#             logdump> ...      # <= inside rlwrap ("up" arrow works)
#
#  obey => * executes obey files: e.g, $ obey dirprm/foo.oby ; OR: $ obey foo
#          * If given a prm file as an argument, the comments in the prm file
#            will be executed by ggsci if they are formatted like: -- ggsci> {commands}
#            For example,
#              -- ggsci> start mgr
#              -- ggsci> add extract foo, extTrailSource dirdat/tc
#              -- ggsci> start foo


#############################################################################
# set/print env, formatted for "eval": eval $( _app_goldengate_printenv )
#
_app_goldengate_printenv() {
  # prefer "less" if installed; otherwise 'more'; degrading gracefully to 'cat'
  type ${PAGER:="less"} >/dev/null 2>&1 \
    || { type less >/dev/null 2>&1 && PAGER=less ; } \
    || { type more >/dev/null 2>&1 && PAGER=more ; } \
    || { type cat >/dev/null 2>&1 && PAGER=cat ; }
  [ "$PAGER" = "less" -a "$LESS" = "" ] && LESS="-ReXF"

  # use a better sed/awk, if installed
  [ "$AWK" = "" ] ||  { type gawk > /dev/null 2>&1 && AWK=gawk; } || { type nawk > /dev/null 2>&1 && AWK=nawk; } || AWK=awk
  [ "$SED" = "" ] ||  { type gsed > /dev/null 2>&1 && SED=gsed; } || SED=sed

  # set defaults; to override, just set any of these explicitly
  : ${GGSCI:="./ggsci"}                        # path to ggsci (assume ".")
  : ${GGSCI_SHELL:="bash"}                     # shell for ggsci "sh" commands
  : ${GGSCI_EDITOR:="${EDITOR:-"vim"}"}        # non-GUI editor for ggsci
  : ${GGSCI_VISUAL:="${VISUAL:-"gedit"}"}      # GUI editor for ggsci
  : ${GGSCI_PAGER:="${PAGER}"}                 # use "less" (default) or "more"
  : ${LOGDUMP:="./logdump"}                    # path to logdump (assume ".")
  : ${LOGDUMP_CONF:="$HOME/.logdumprc"}        # logdump initialization commands
  : ${RLWRAP:="rlwrap"}                        # rlwrap (found in PATH); only
  type $RLWRAP >/dev/null 2>&1 || RLWRAP=      #   use rlwrap if found

  echo "export GGSCI=\"${GGSCI}\"; "
  echo "export GGSCI_SHELL=\"${GGSCI_SHELL}\"; "
  echo "export GGSCI_EDITOR=\"${GGSCI_EDITOR}\"; "
  echo "export GGSCI_PAGER=\"${GGSCI_PAGER}\"; "
  echo "export LOGDUMP=\"${LOGDUMP}\"; "
  echo "export LOGDUMP_CONF=\"${LOGDUMP_CONF}\"; "
  echo "export RLWRAP=\"${RLWRAP}\"; "
  echo "export PAGER=\"${PAGER}\"; "
  [ "$PAGER" = "less" -o "$GGSCI_PAGER" = "less" ] && echo "export LESS=\"${LESS}\"; "
}

#############################################################################
# Source 'gg' bash completion. For example, typing "gg stop e[tab]" completes
# all *running* processes starting with "e". The path to the completion script
# is configurable; several defaults are attempted. To override, set either:
#  $ export GG_CONF_DIR=path/to/dir   # i.e: $GG_CONF_DIR/bash_completion_gg
# or,
#  $ export BASH_COMPLETION_GG=full-path/to/file/bash_completion_gg
#
# A log file is also configured; if no logger script is found, uses stderr.
#
_init_app_goldengate_env() {
  local gg_comp=${GG_CONF_DIR:="${HOMEDIR_BIN}/gg"}/bash_completion_gg
  if [ -e "$BASH_COMPLETION_GG" ]; then
      gg_comp=$BASH_COMPLETION_GG
  elif [ ! -e "$gg_comp" ]; then
      gg_comp=$(dirname ${BASH_SOURCE[0]})/bash_completion_gg
  fi

  # source ${HOMEDIR_BIN}/common/log.sh 2>/dev/null || log() { : ; }
  [ -e ${HOMEDIR_BIN}/common/log.sh 2>/dev/null ] \
      && source ${HOMEDIR_BIN}/common/log.sh 2>/dev/null \
      || log() { printf "$@\n" 1>&2; }

  source ${gg_comp} || log WARN "Error loading GoldenGate bash completion: ${gg_comp}"

  return 0
}

#############################################################################
# Usage: rlogdump [OPEN] trailfile     # (the "open" argument is optional)
# Runs logdump (inside rlwrap, if installed). Optionally use "gg" directly,
# which will run rlogdump if given trail as an argument. After logdump is
# started, the logdump commands in $LOGDUMP_CONF are run automatically;
# for example, "ghdr on". By default, LOGDUMP_CONF=$HOME/.logdumprc
#
rlogdump() {
  local init="ghdr on" cmd=OPEN

  # pass just trial file as argument, or (backwards compatible) "open {file}"
  [ $# -gt 0 -a -e "$1" ] && cmd=OPEN || cmd=""

  # optionally generate completion word list for rlwrap
  # echo 'help'|./logdump|egrep '^[A-Z]' |egrep -v '^Oracle|^Copy|^Version|Logdump' | $SED 's/ .*//' |sort -u

  # init logdump (e.g, "ghdr on") in ~/.logdumprc (default: ghdr on)
  [ -e "$LOGDUMP_CONF" ] && init=$(cat "$LOGDUMP_CONF" | egrep -v '^#|^ *$')

  if [ "$RLWRAP" != "" ]; then
     $RLWRAP -c -P "$init" $LOGDUMP $cmd $@
  else
     $LOGDUMP $cmd $@
  fi
}
typeset -fx rlogdump

#############################################################################
# gg edit [param] {process} - edit prm and/or property file ("param" optional)
#
# Opens {process}.prm files (and {process}.propertes, if it exists) using the
# preferred editor. Use either "edit foo" or "edit dirprm/foo.prm"; if using
# the shorter syntax, only existing prm (and/or property) files are opened;
# to create new files, use "gg edit dirprm/{filename}.{suffix}"
#
# The files are opened using GGSCI_EDITOR (example: export GGSCI_EDITOR=gvim)
#
# Examples:
#  gg edit foo   # if exists, edit "dirprm/foo.prm" and "dirprm/foo.properties"
#  gg edit param foo  # same as "gg edit foo"
#  gg edit dirprm/foo.properties #  edit (or create) dirprm/foo.properties
#
_gg_edit () {
  local ignore='\.exe$|^ *$|:$|^extract$|^gendef$|^defgen$|^ggsci$|^keygen$|^logdump$|^mgr$|^reverse$|^server$|^replicat$|\.so$|\.dll$|~$|\.bak$'
  local args=$(echo "$@" | $SED 's/^ *edit *//I; s/^ *params* *//I')
  local ignore_files='|\.exe$|^ *$|:$|^extract$|^gendef$|^defgen$|^ggsci$|^keygen$|^logdump$|^mgr$|^reverse$|^server$|^replicat$|\.so$|\.dll$|~$|\.bak$'
  local files=$(for f in $args
    do
      ls dirprm/${f}.{properties,prm} \
        || ls $f | egrep -v "$ignore" \
        || echo "$f" | grep "/"
    done 2>/dev/null)

  [ "$files" = "" ] \
    &&  echo "** No match: \"${args}\". Create new prm files from ggsci: \"edit param {name}\"" \
    || $GGSCI_EDITOR $files
}

#############################################################################
# Check if file is an 'obey' file, to prevent inadvertant execution of a prm
# file when running "gg obey {file}". Note two types of "obey" are provided:
#  bash$ obey foo      # bash function, runs ggsci commands in the comments
#  bash$ gg obey foo   # run ggsci "obey", the same as: "ggsci> obey foo"
#
_gg_is_obey_file() {
  local args files
  if echo "$@" | egrep -i "^ *obey" >/dev/null
  then
    args=$(echo "$@" | $SED 's/^ *obey *//I')
    files=$(for f in $args; do ls $f dirprm/$f 2>/dev/null ; done)
    for f in $files ; do
        egrep -i '^ *extract ' $f >/dev/null 2>&1 \
          && echo "** error: file does not appear to be an obey file (is it a prm file?): $f" \
          && return 2
    done
  fi
  return 0
}


#############################################################################
# add "!" after any "stop mgr" cmd (does NOT assume GNU sed (which is a lot simpler)
_gg_bangify() {
    $SED 's/\([Ss][Tt][Oo][Pp]  *[Mm].*[Gg].*[Rr]\) *!*$/\1!/'
    return 0
  }

#############################################################################
# Run ggsci or logdump (inside rlwrap, if installed). If a file is given as
# an arg, assume logdump is to be run; otherwise run ggsci.
#
gg() {
  # condense ggsci output (use awk to avoid sed limitations on solaris)
  local ggsci_to_ignore=$($GGSCI -v | tr -d '\r' | $SED "s/[^A-Za-z0-9]/./g" | $AWK 'BEGIN{printf "^Copyright "} /./{printf "|^ *%s",$0;next}')
  local pager=$GGSCI_PAGER

  if [ $# -gt 0 -a -e "$1" ]; then
    rlogdump $@
  else
    if [ $# -eq 0 ]; then
      # If no arguments, just run ggsci; wrap it with rlwrap (if found)
      [ "$RLWRAP" != "" ] && printf "# run: $RLWRAP $GGSCI\n"
      $RLWRAP $GGSCI
    else
      # Only use pager (more/less) for "view" command; if command is "edit"
      # then don't invoke ggsci. Else, pipe all commands to ggsci, stripping
      # out ggsci banner (etc), up to first non-blank line.
      echo "$@" | egrep -i "^ *view |^ *help *" >/dev/null || pager=cat
      if echo "$@" | grep -i "^ *edit " >/dev/null ; then
        _gg_edit "$@"
      else
        _gg_is_obey_file "$@" || return 2
        printf "$*\n" | _gg_bangify | $GGSCI | egrep -v "$ggsci_to_ignore" |  $SED -n '/^[^ ]/,$p' | $pager
      fi
    fi
  fi
}
typeset -fx gg


#############################################################################
# Look for commands (shell or ggsci) to run in the comments of the prm files:
#   -- example parameter file with comments such as:
#   --   ggsci> add extract ...
#   --   sh> rm dirout/discard.txt
#
# Note: this function is not used to run normal GG "obey" files. For that,
# just use: $ gg obey dirprm/foo.oby
#
# Usage: use the 'obey' function directly from the shell:
#  $ obey dirprm/ggs-script.oby    # Invoking obey scripts from the shell;
#  $ obey dirprm/eora.prm          # execute ggsci comments in prm file,
#  $ obey eora                     # using file name or extract name.
#
# Example of a normal obey file:
#  $ cat bin/ggs-script.oby
#    delete javaue
#    add Extract javaue, ExtTrailSource dirdat/ue, extseqno 0, extrba 0
#    add ExtTrail dirdat/zz, Extract javaue
#  $ obey bin/ggs-script.oby
#
# Example executing ggsci commands in "prm" file:
#  $ more dirprm/eora.prm
#     -- to (re)add  the extract, reading from trail dirdat/aa
#     --   ggsci> add Extract eora, ExtTrailSource dirdat/aa
#     --   ggsci> add ExtTrail dirdat/zz, Extract eora
#     -- commented out ggsci command (use "#"):
#     --   #ggsci> add ExtTrail... (this ggsci command is commented out)
#     --   ggsci> stop mgr!
#     --   ggsci> start mgr
#     --   ggsci> start eora
#     Extract eora
#     SourceDefs dirdef/source.def
#     ...
#  $ obey dirprm/eora.prm
#
_app_goldengate_obeyprm () {
  local ggsci_pattern='^-- *ggsci> *'
  local shell_pattern='^-- *sh> *'
  local tmp_oby use_tmp_oby=false use_pause=false

  usage() { cat<<EOF
  Usage: obey [-x|-h|-p] {prm_file|obey_script|extract_name}
    Run a goldengate 'obey' file, or execute ggsci commands that
    are comments inside a prm file.
  Options:
      -x  if ggsci on this platform does not correctly handle piped
          commands, use a temp obey file to execute the commands
      -p  pause 1 second between executing ggsci commands (piped cmds only)
      -h  print help usage
  Example:
      extract foo
      -- this is comment that will be executed:
      -- ggsci> start mgr
EOF
  }

  if [ "${1:0:1}" = "-" ]; then
    if [ "$1" = "-h" ] ; then
        usage; return 1
    elif [ "$1" = "-x" ] ; then
      use_tmp_oby=true
      tmp_oby="/tmp/tmp_${LOGNAME}_$(basename $prm .prm).$$.oby"
      rm -f "$tmp_oby"
    elif [ "$1" = "-p" ] ; then
      use_pause=true
    fi
    shift
  fi

  local prm=$1

  run_ggsci() {
    $use_tmp_oby && cat || $GGSCI
  }

  use_tmp() {
    $use_tmp_oby && tee -a $tmp_oby 1>&2 || cat
  }

  run_tmp() {
    $use_tmp_oby && { echo "obey $tmp_oby" | $GGSCI ; rm $tmp_oby; }
  }

  [ ! -e "$prm" ] && echo "** error: file not found: $prm" && return 2
  egrep -i "$ggsci_pattern|$shell_pattern" $prm | $SED "s/$ggsci_pattern//" | $SED "s/$shell_pattern\(.*\)/sh ${GGSCI_SHELL} -c \"\1\"/" | while read line
  do
    $use_pause && sleep 1
    echo "[stderr] $line" 1>&2
    #_gg_is_command "$line" || echo "$line"
    echo "$line" | _gg_bangify | use_tmp
    echo
  done | run_ggsci
  run_tmp
}

#############################################################################
# Executes 'obey' file OR ggsci commands in the prm file; for example, given
# foo.prm:
#    extract foo
#    -- ggsci> add extract foo...
#    -- ggsci> add extTrail dirdat/aa extract foo...
# Invoke using either:
#    $ obey dirprm/foo.oby
#    $ obey foo     # works for either dirprm/foo.prm OR dirprm/foo.oby
#
obey () {
  local opt ret=2
  while [ "${1:0:1}" = "-" ]; do opt="$opt $1"; shift; done
  local fname=$1 pname=dirprm/${1}.prm oname=dirprm/${1}.oby

  usage() { cat<<EOF
  Usage: obey [-x|-p] {file.oby | file.prm | extract_name}
    Run a normal GoldenGate 'obey' file, OR execute 'ggsci' commands in
    the comments inside a prm file, formatted as:
       -- the next line is a comment to be executed:
       -- ggsci> info all
    Options:
      -x   work-around for older versions of ggsci that do not handle commands
           piped to ggsci. A temp obey file is used to execute multiple commands.
      -p   pause between ggsci commands (if not using -x)
EOF
  }

  if [ ! -e "$fname" ]; then   # decide if it's a prm file or oby file
     [ -e "$pname" ] && fname=$pname
     [ -e "$oname" ] && fname=$oname
  fi

  if [ "${fname##*.}" = "oby" ]; then
    printf "# run obey file: $fname\n"
    echo "obey $fname" | $GGSCI
    ret=$?
  elif [ "${fname##*.}" = "prm" -o "$fname" = "GLOBALS" ]; then
    printf "# run ggsci commands (in comments): $fname\n"
    _app_goldengate_obeyprm $opt "$fname"
    ret=$?
  else
    printf "** error: unknown file type / file not found; expecting '*.prm' or '*.oby' file\n\n" 1>&2
    usage
  fi
  return $ret
}
typeset -fx obey


#############################################################################
# set up the environment

eval $( _app_goldengate_printenv )
_init_app_goldengate_env

