#############################################################################
# Set up Java environment (and also ant & maven, if available)
#

export JAVA_HOME JAVA5_HOME JAVA6_HOME JAVA7_HOME M2_HOME MAVEN_HOME ANT_HOME
export JAVA_PATH DEFAULT_JAVA_PATH

# show current shell's java version in the prompt
export USE_PROMPT_WITH_JAVA

log() { :; }   # define default no-op logger as fallback
[ -f $HOMEDIR_BIN/common/log.sh ] && . $HOMEDIR_BIN/common/log.sh \
  || { [ "${#VERBOSE}" -gt 0 ] && printf "** error: unable to load common logging library: $HOMEDIR_BIN/common/log.sh\n" 1>&2 ; }

[ -f $HOMEDIR_BIN/common/hashtab.sh ] && . $HOMEDIR_BIN/common/hashtab.sh \
  || log ERROR "** error: unable to load common hashtable library: $HOMEDIR_BIN/common/hashtab.sh"

# LOG_LEVEL=DEBUG

#############################################################################
# Find JAVA_HOME for a given Java version {1.5, 1.6, 1.7}.
# Use JAVA_PATH (like PATH) to list Java installations.  Notes:
#  * uses "java -version" to get Java version, which could take a while.
#  * uses path expansion (JAVA_PATH) (not "find") to find JVM's. For better
#    speed, set JAVA_PATH to a short list, or (better) set JAVA{5,6,7}_HOME
#
# Examples:
#  Find Java in the default search paths ($DEFAULT_JAVA_PATH)
#    $ find_java
#      /usr/local/java
#    $ find_java 1.6
#      /opt/jdk1.6
#
#  Use the result to set JAVA_HOME and (if successful) add to PATH
#    $ JAVA_HOME=$(find_java 1.6) && export PATH=$PATH:$JAVA_HOME/bin
#
#  Give a list of potential paths to look for JVM's:
#    $ JAVA_PATH="/opt/jdk1.6/bin /usr/java{5,6}/bin" find_java 1.5
#    /usr/java5
#
find_java() {
  local jversion="$1" result="no" x=""
  local java_default="/{opt,usr}/{java,jdk,jre,lib/jvm}/{latest,jdk,jre}*/bin"
  local java7_default="/{opt,usr}/{java,jdk,jre}*7*/bin"
  local java6_default="/{opt,usr}/{java,jdk,jre}*6*/bin"
  local java5_default="/{opt,usr}/{java,jdk,jre}*5*/bin"

  log DEBUG "(before) current JAVA_PATH=\"$JAVA_PATH\""
  log DEBUG "(before) DEFAULT_JAVA_PATH=\"$DEFAULT_JAVA_PATH\""

  # Use JAVA_PATH if it's set to find JVM's; otherwise, create a DEFAULT_JAVA_PATH.
  # By default look first in JAVA_HOME, then JAVA{7,6,5}_HOME, then /opt, /usr, ...

  if [ "$JAVA_PATH" != "" ]
  then
    log DEBUG "Search for Java \"$jversion\" in JAVA_PATH=$JAVA_PATH"
  else
    if [ "$DEFAULT_JAVA_PATH" = "" ]; then
      log DEBUG "Both JAVA_PATH and DEFAULT_JAVA_PATH unset: look for Java in common locations"
      [ "$JAVA_HOME"  != "" -a -d "$JAVA_HOME/bin/" ]  && java_default="$JAVA_HOME/bin/"
      [ "$JAVA7_HOME" != "" -a -d "$JAVA7_HOME/bin/" ] && java7_default="$JAVA7_HOME/bin/"
      [ "$JAVA6_HOME" != "" -a -d "$JAVA6_HOME/bin/" ] && java6_default="$JAVA6_HOME/bin/"
      [ "$JAVA5_HOME" != "" -a -d "$JAVA5_HOME/bin/" ] && java5_default="$JAVA5_HOME/bin/"
      DEFAULT_JAVA_PATH="$java_default $java7_default $java6_default $java5_default"
    fi
    log DEBUG "JAVA_PATH not set. Search for Java \"$jversion\" in default paths: $DEFAULT_JAVA_PATH"
  fi

  # expand & remove duplicates from list of directories (sorting may take longer...)
  #local search_dirs=$(ls -d $(eval echo ${JAVA_PATH:-$DEFAULT_JAVA_PATH}) 2>/dev/null | sort -r | uniq)
  local search_dirs=$(ls -d $(eval echo ${JAVA_PATH:-$DEFAULT_JAVA_PATH}) 2>/dev/null)
  local search_dirs_arr=( $search_dirs )
  log INFO "\n===== current search_dirs=(${#search_dirs_arr[*]}):  $(echo ${search_dirs})"

  for x in ${search_dirs}  #for x in "${search_dirs_arr[@]}"; do
  do
    log INFO "  ...searching for java $jversion, in \"$x\": "
    [ -x $x/java ] && $x/java -version 2>&1 | head -1 | grep "$jversion" >/dev/null && result="found"
    [ "$result" = "found" ] \
       && echo "${x%/*}" \
       && log INFO "  ... \"${x}\" => Java \"${jversion}\"? $result" \
       && return 0
  done

  log INFO "   ==NONE FOUND=="
  return 1;
}


#############################################################################
# Calcuate Java version for prompt. Calculated in the background, writing to
# tmp file for future use (storing values in env var's doesn't work; prompt
# values are calculated in subshell, and values can't be set and later used.)
#
current_java_version() {
  update_cache() { # find java version in PATH, not one pointed to by JAVA_HOME
    addhash -b java version "java -version 2>&1 | awk 'NR == 1 { print \$NF }'"
    addhash java java_home "$JAVA_HOME"
    addhash java java_path "$(type -p java 2>&1)"
    log DEBUG "cached: $(dumphash java 2>&1)"
    dumphash java 2>&1 | log DEBUG
    return 0
  }

  local cache_java_home=$(gethash java java_home)
  local cache_java_path=$(gethash java java_path)
  local cache_java_version=$(gethash java version)

  if [ ${#cache_java_path} -eq 0 -o ${#cache_java_version} -eq 0 ]
  then
    log INFO "cache unset: java_home=\"$cache_java_home\" ($cache_java_path) ver=\"$cache_java_version\""
    update_cache
  elif [ "$(type -p java)" != "$cache_java_path" ]
  then
    log INFO "cache stale: $cache_java_home ( $cache_java_path ) => new: $JAVA_HOME ($(type -p java))"
    update_cache
  else
    echo $cache_java_version
    return 0
  fi

  cache_java_version=$(gethash java version)  # possibly just updated, possibly still unset
  echo "$cache_java_version"
  return 0
}


#############################################################################
# Set JAVA_HOME only if top-level login shell; else, use pre-existing JAVA_HOME.
# Allows changing JAVA_HOME in subshells, e.g: JAVA_HOME=/opt/jdk7 bash -i
# Use java6 (if exists), else java7, else java5.
#
if [ "$SHLVL" -eq 1 -o "$JAVA_HOME" = "" ]; then
  if [ "$h_os" != "cygwin" ]; then  # don't do any work on cygwin/windows (too slow)
    [ "$JAVA7_HOME" = "" ] && export JAVA7_HOME=$(find_java 1.7)
    [ "$JAVA6_HOME" = "" ] && export JAVA6_HOME=$(find_java 1.6)
    [ "$JAVA5_HOME" = "" ] && export JAVA5_HOME=$(find_java 1.5)
    export JAVA_HOME=${JAVA6_HOME:-"${JAVA7_HOME:-${JAVA5_HOME}}"}
  fi
else
  export JAVA_HOME=${JAVA_HOME:-"${JAVA6_HOME:-${JAVA7_HOME}}"}
  [ "$JAVA_HOME" = "" ] && JAVA_HOME=${JAVA5_HOME:-/usr/}
fi

# only update PATH if JAVA_HOME is set
[ ${#JAVA_HOME} -gt 1 ] && PATH="${JAVA_HOME}/bin:$PATH"

if [ "$USE_PROMPT_WITH_JAVA" = "" ]; then
  [ -x "$JAVA_HOME"/bin/javac ] && tmp_j=jdk || tmp_j=jre
  USE_PROMPT_WITH_JAVA="${tmp_j}\$(current_java_version) |"
fi

# return true
:

