#!/bin/bash
#
# Set up Java environment (and also ant & maven, if available)

export JAVA_HOME JAVA6_HOME JAVA7_HOME JAVA8_HOME JAVA9_HOME M2_HOME MAVEN_HOME ANT_HOME
export JAVA_PATH DEFAULT_JAVA_PATH
export PS1_JAVA   # current shell java version for prompt

#############################################################################
_app_java_env_init() {
  [ ${HOMEDIR_BIN_COMMON_LOG_INIT:-0} -eq 0 ] && source $HOMEDIR_BIN/common/log.sh >> $HOMEDIR_LOG 2>&1
  [ ${HOMEDIR_BIN_COMMON_HASHTAB_INIT:-0} -eq 0 ] && source $HOMEDIR_BIN/common/hashtab.sh
}

_app_java_log() {
  #local LOG_LEVEL=DEBUG  # {NONE, ERROR, WARN, INFO, DEBUG, TRACE}
  : ${LOG_LEVEL:="INFO"}
  log "$@"
}

#############################################################################
# Find the JAVA_HOME for a Java version {1.6,1.7,1.8}. Use $JAVA_PATH like
# the $PATH var, to enumerate available Java installations.
#  * "java -version" used to get version number (could be slow)
#  * path expansion (JAVA_PATH), not "find", used to locate JVM's.
#    Set JAVA_PATH to a short list to be faster; or (better), set JAVA{6,7,8}_HOME
# Examples:
#  Find Java in the default search paths ($DEFAULT_JAVA_PATH)
#    $ find_java
#      /usr/local/java
#    $ find_java 1.7
#      /usr/lib/jvm/java-7-openjdk-amd64/jre
#    $ find_java 1.8
#      /opt/jdk8
#  Use the result to set JAVA_HOME, and (if found) set PATH
#    $ JAVA_HOME=$(find_java 1.6) && export PATH=$JAVA_HOME/bin:$PATH
#  Find a JVM given a list of potential paths:
#    $ JAVA_PATH="/opt/jdk1.8/bin /usr/java{6,7,8}/bin" find_java 1.8
#    /usr/java8
#
find_java() {
  local jversion="$1" result="no" x=""
  local  java_default="/{opt,usr}/{java,jdk,lib/jvm}/{latest,java,jdk,jre}*/bin"
  local java9_default="/usr/{java*9,jdk*9,lib/jvm/j*9}*/bin"
  local java8_default="/usr/{java*8,jdk*8,lib/jvm/j*8}*/bin"
  local java7_default="/usr/{java*7,jdk*7,lib/jvm/j*7}*/bin"
  local java6_default="/usr/{java*6,jdk*6,lib/jvm/j*6}*/bin"

  _app_java_log DEBUG "(before) current JAVA_PATH=\"$JAVA_PATH\""
  _app_java_log DEBUG "(before) DEFAULT_JAVA_PATH=\"$DEFAULT_JAVA_PATH\""

  # Use JAVA_PATH if it's set to find JVM's; otherwise, create a DEFAULT_JAVA_PATH.
  # By default look first in JAVA_HOME, then JAVA{7,6,8}_HOME, then /opt, /usr, ...

  if [ ${#JAVA_PATH} -gt 0  ]; then
    _app_java_log DEBUG "Search for Java \"$jversion\" in JAVA_PATH=$JAVA_PATH"
  else
    if [ "$DEFAULT_JAVA_PATH" = "" ]; then
      _app_java_log DEBUG "Both JAVA_PATH and DEFAULT_JAVA_PATH unset: look for Java in common locations"
      [ "$JAVA_HOME"  != "" -a -d "$JAVA_HOME"/bin/ ]  && java_default="$JAVA_HOME/bin/"
      [ "$JAVA9_HOME" != "" -a -d "$JAVA9_HOME"/bin/ ] && java9_default="$JAVA9_HOME/bin/"
      [ "$JAVA8_HOME" != "" -a -d "$JAVA8_HOME"/bin/ ] && java8_default="$JAVA8_HOME/bin/"
      [ "$JAVA7_HOME" != "" -a -d "$JAVA7_HOME"/bin/ ] && java7_default="$JAVA7_HOME/bin/"
      [ "$JAVA6_HOME" != "" -a -d "$JAVA6_HOME"/bin/ ] && java6_default="$JAVA6_HOME/bin/"
      # including all versions takes too long; instead, rely on JAVA_HOME being set correctly.
      #DEFAULT_JAVA_PATH="$java_default $java8_default $java7_default $java6_default $java9_default"
      DEFAULT_JAVA_PATH="$java_default"
    fi
    _app_java_log DEBUG "JAVA_PATH not set. Search for Java \"$jversion\" in default paths: $DEFAULT_JAVA_PATH"
  fi

  # expand & remove duplicates from list of directories (sorting may take longer...)
  #local search_dirs=$(ls -d $(eval echo ${JAVA_PATH:-$DEFAULT_JAVA_PATH}) 2>/dev/null | sort -r | uniq)
  local search_dirs=$(ls -1d $(eval echo ${JAVA_PATH:-$DEFAULT_JAVA_PATH} 2>/dev/null) 2>/dev/null | uniq)
  local search_dirs_arr=( $search_dirs )
  _app_java_log INFO "\n===== current search_dirs=(${#search_dirs_arr[*]}):  $(echo ${search_dirs})"

  for x in ${search_dirs}   #for x in "${search_dirs_arr[@]}"
  do
    _app_java_log INFO "  ...searching for java $jversion, in \"$x\": "
    # 'java -version' first line like: java version "1.7.0_79" (exclude "JAVA.*OPTIONS" msg)
    [ -x "$x"/java ] && "$x"/java -version 2>&1 \
       | grep -v 'JAVA_' \
       | head -1 | grep "$jversion" >/dev/null && result="found"
    [ "$result" = "found" ] \
       && echo "${x%/*}" \
       && _app_java_log INFO "  ... \"${x}\" => Java \"${jversion}\"? $result" \
       && return 0
  done

  _app_java_log INFO "   ==NONE FOUND=="
  return 1;
}


#############################################################################
# Calcuate Java version for prompt. Calculated in the background, writing to
# tmp file for future use (storing values in env var's doesn't work; prompt
# values are calculated in subshell, and values can't be set and later used.)
#
current_java_version() {
  local cache_java_home cache_java_path cache_java_version found_java which_java
  which_java=$(type -p java 2>&1) && found_java=true || found_java=false

  update_cache() { # find java version in PATH, not one pointed to by JAVA_HOME
    $found_java \
      && hashtab add -b java version "java -version 2>&1 | grep -v JAVA_ | awk 'NR == 1 { print \$NF }'" \
      || hashtab add java version "(none)"
    hashtab add java java_home "$JAVA_HOME"
    hashtab add java java_path "$which_java"
    #_app_java_log DEBUG "cached: $(hashtab dump -l java 2>&1)"
    return 0
  }

  cache_java_home=$(hashtab get java java_home)
  cache_java_path=$(hashtab get java java_path)
  cache_java_version=$(hashtab get java version)

  if [ ${#cache_java_path} -eq 0 -o ${#cache_java_version} -eq 0 ]
  then
    _app_java_log DEBUG "cache unset: java_home=\"$cache_java_home\" ($cache_java_path) ver=\"$cache_java_version\""
    update_cache
  elif [ "$which_java" != "$cache_java_path" ]
  then
    _app_java_log INFO "cache stale: $cache_java_home ($cache_java_path) => new: $JAVA_HOME ($which_java)"
    update_cache
  else
    echo $cache_java_version
    return 0
  fi

  cache_java_version=$(hashtab get java version)  # possibly just updated OR maybe still unset
  echo "$cache_java_version"
  return 0
}


#############################################################################
# Set JAVA_HOME only if top-level login shell; else, use pre-existing JAVA_HOME.
# Allows changing JAVA_HOME in subshells, e.g: JAVA_HOME=/opt/jdk7 bash -i

_app_java_env_init

if [ "$SHLVL" -eq 1 -o "$JAVA_HOME" = "" ]; then
  if [ "$h_os" != "cygwin" ]; then  # don't do any work on cygwin/windows (too slow)
    [ "$JAVA9_HOME" = "" ] && export JAVA9_HOME=$(find_java 1.9)
    [ "$JAVA8_HOME" = "" ] && export JAVA8_HOME=$(find_java 1.8)
    [ "$JAVA7_HOME" = "" ] && export JAVA7_HOME=$(find_java 1.7)
    [ "$JAVA6_HOME" = "" ] && export JAVA6_HOME=$(find_java 1.6)
    # Use java7 (if exists), else java6, else java8 (soon change to java8 by default)
    export JAVA_HOME=${JAVA8_HOME:-"${JAVA7_HOME:-${JAVA6_HOME}}"}
  fi
else
  export JAVA_HOME=${JAVA_HOME:-"${JAVA8_HOME:-${JAVA7_HOME}}"}
  [ "$JAVA_HOME" = "" ] && JAVA_HOME=${JAVA6_HOME:-/usr/}
fi

# only update PATH if JAVA_HOME is set
[ ${#JAVA_HOME} -gt 1 ] && PATH="${JAVA_HOME}/bin:$PATH"

if [ "$PS1_JAVA" = "" ]; then
  [ -x "$JAVA_HOME"/bin/javac ] && tmp_j=jdk || tmp_j=jre
  PS1_JAVA="${tmp_j}\$(current_java_version) |"
fi

# return true
:

