###############################################################################
# Initialization order, and default locations, to set per-user/host/OS env:
#   (1)  local.env        - unversioned, local file in $HOME (optional)
#   (2)  $HOME/.aliases   - cross-platform generic aliases/functions for everywhere
#   (3)  user-{user}.env  - filename based on login ($LOGNAME) (~/user_env)
#   (4)  org-{name}.env   - user can belong to multiple org's (~/user_env)
#   (5)  host-{name}.env  - name may be FQDN and/or short (~/host_env)
#   (6)  os-{type}.env    - where type is linux, aix, solaris, etc (~/env)
#   (7)  app-{name}.env   - list of app's are configured (~/env)
#
# env var's, and their default values:
#   $HOMEDIR_ENV (~/env)  -- generic env config
#   $HOMEDIR_BIN (~/bin)  -- shared scripts, bash completion
#   $HOMEDIR_USER_ENV (~/user_env) -- per-user env settings
#   $HOMEDIR_HOST_ENV (~/host_env) -- per-host env settings

################################################################################
# Notes:
#  * earlier settings can optionally be overridden by later env files.
#    - to set foo unconditionally =>  foo="orig_val"       # old value foo lost
#    - to set foo only optionally =>  : ${foo:="new_val"}  # foo remains orig_val
#  * ~/.aliases => cross-platform generic aliases/functions, for all users
#  * user-$LOGNAME.env, => per-user settings (custom aliases, functions)
#  * host-$HOSTNAME.env => per-host settings (set PATH, various *_HOME vars, etc)
#  * host-{fqdn}.env => if fqdn env exists, it's sourced before host-{name}.env
#  * os-*.env => common settings for all OS's (eg: common to all linux/solaris/aix/etc)
#  * org-${USER_ORG}.env => list of org's for user is: USER_ORG=one,two,three,...
#  * set USER_ORG in local.env or user-*.env. May be many; e.g: USER_ORG=$USER_ORG,one,two,...
#      - loads in order: org-default.env, org-one.env, org-two.env, (etc)
#      - app-*.env files not sourced more than once
#  * app-*.env => per-app settings, list of apps is APP_ENV_LIST=one,two,three
#  * if login errors, check $HOMEDIR_LOG (~/.h_log) or ~/.xsession-errors
###############################################################################

: ${HOMEDIR_ENV:="$HOMEDIR/env"}
: ${HOMEDIR_BIN:="$HOMEDIR/bin"}
: ${HOMEDIR_USER_ENV:="$HOMEDIR/user_env"}
: ${HOMEDIR_HOST_ENV:="$HOMEDIR/host_env"}
#: ${USER_ORG:="default,dev"}

# use GNU awk and GNU sed, if possible (esp. Solaris)
#AWK=awk; type nawk > /dev/null 2>&1 && AWK=nawk; type gawk > /dev/null 2>&1 && AWK=gawk
{ type gawk > /dev/null 2>&1 && AWK=gawk; } || { type nawk > /dev/null 2>&1 && AWK=nawk; } || AWK=awk
type gsed > /dev/null 2>&1 && SED=gsed || SED=sed

[ ${HOMEDIR_BIN_COMMON_LOG_INIT:-0} -eq 0 ] && source $HOMEDIR_BIN/common/log.sh >> $HOMEDIR_LOG 2>&1

setup_env_log() {
  local LOG_LEVEL=INFO
  log -F setup "$@"
  # log "$@"
}

setup_env_do_trunc_log() {
  # Summarize/truncate main log file (check size every ~100 logins)
  if [ "$sh_type" = "bash" -a -f $HOMEDIR_LOG ]; then
    if (( RANDOM % 100 == 0 )) && (( $(du -k $HOMEDIR_LOG | cut -f1) > 2048 )); then
      h_log "truncating log: $(ls -l $HOMEDIR_LOG)\n"
      egrep 'loaded.*sec' $HOMEDIR_LOG | tail -15000 > ${HOMEDIR_LOG}.$$.tmp
      if [ -f ${HOMEDIR_LOG}.$$.tmp ]; then
        setup_env_log INFO "truncating log: $(du -sk $HOMEDIR_LOG)"
        cat ${HOMEDIR_LOG}.$$.tmp > $HOMEDIR_LOG  # keep perms,links
        rm -f ${HOMEDIR_LOG}.$$.tmp
      fi
    fi
  fi
}

setup_env_do_trunc_log

# Setup env per-user/OS/host
[ -f $HOMEDIR_ENV/setup-user.env ] && {
  source $HOMEDIR_ENV/setup-user.env
  h_log "user-env loaded\n"
}

# Setup env for apps for this user (git, java, prompt, completion, etc)
[ -f $HOMEDIR_ENV/setup-app.env ] && {
  source $HOMEDIR_ENV/setup-app.env
  h_log "app-env loaded\n"
}

