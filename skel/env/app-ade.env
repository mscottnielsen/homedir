##############################################################################
# various config options for ADE, functions, bash completion.


##############################################################################
# View storage typically uses
#   ADE_DEFAULT_VIEW_STORAGE_LOC=/net/`hostname`/scratch/$USER/view_storage
#
# Notes:
#  * 'farm' hostnames must use FQDN
#  * ADE assumes /net/`hostname` exists, if not, contact PDIT (not "ade cmhelp")
#  * ADE probably won't run (correctly) for GG legacy hosts, but if you want to try:
#    * work-around missing ADE storage dirs using a different mount (eg, /net/rtdc1017nap)

#        by just setting: export GG_ADE_SHARE=1
#    * you MUST use "/net/{nas}", not the old "/mnt/public" (mount must be global)
#    * the official ADE env vars are prefixed with "ADE_"; mine use "GG_"

# ADE vars:
export ADE_DEFAULT_VIEW_STORAGE_LOC ADE_DEFAULT_TWORK_STORAGE_LOC

# my vars:
export GG_ADE_DEFAULT_SHARE GG_ADE_SHARE GG_ADE_DEFAULT_SHARE

# work-around for GG hosts (valid only for OGGADP dev group); allows view to be shared across GG hosts
: ${GG_ADE_DEFAULT_SHARE:="/net/slcnas484/export/gg_shared1"}

##############################################################################
# print env
_app_ade_printenv() {
  local dbg=false quiet=false dir=""

  _app_ade_printenv2() {
    echo "export GG_ADE_DEFAULT_SHARE=\"$GG_ADE_DEFAULT_SHARE\""
    echo "export ADE_DEFAULT_VIEW_STORAGE_LOC=\"$ADE_DEFAULT_VIEW_STORAGE_LOC\""
    echo "export ADE_DEFAULT_TWORK_STORAGE_LOC=\"$ADE_DEFAULT_TWORK_STORAGE_LOC\""
    echo "export PATH=\"${PATH}\":\"${HOMEDIR_BIN}\"/ade"
    #echo "H_APP_ADE_ENV=\"$(( ${H_APP_ADE_ENV:-0} + 1 ))\""
    return 0
  }

  [ ${H_APP_ADE_ENV:-0} -ge 1 ] && _app_ade_printenv2 && return 0

  [ "$1" = "-x" ] && dbg=true && shift && set -x
  [ "$1" = "-q" ] && quiet=true

  # setup normal non-work-around defaults (if not already setup)
  if [ "$GG_ADE_SHARE" = "0" ]; then
    dir="/net/$(hostname -f 2>/dev/null || hostname)/scratch/"
    if [ -d "$dir" ]; then
      : ${GG_ADE_DEFAULT_SHARE:="$dir"}
      : ${ADE_DEFAULT_VIEW_STORAGE_LOC:="$GG_ADE_DEFAULT_SHARE/${LOGNAME:-"$USER"}/view_storage"}
      : ${ADE_DEFAULT_TWORK_STORAGE_LOC:="$GG_ADE_DEFAULT_SHARE/${LOGNAME:-"$USER"}/work"}

      mkdir -p "$ADE_DEFAULT_VIEW_STORAGE_LOC"
      mkdir -p "$ADE_DEFAULT_TWORK_STORAGE_LOC"
    fi
  fi

  # work-around for legacy GG hosts, with unconventional setups
  if [ "$GG_ADE_SHARE" = "1" -a -d "$GG_ADE_DEFAULT_SHARE" ];  then
    if [ -d "$ADE_DEFAULT_VIEW_STORAGE_LOC" ]; then
      echo "** Default ADE view storage exists: $ADE_DEFAULT_VIEW_STORAGE_LOC" 1>&2
    else
      [ -d "$GG_ADE_DEFAULT_SHARE" ] && echo "** Default ADE mount point exists: $GG_ADE_DEFAULT_SHARE" 1>&2
      echo "** Default ADE view storage does not exist: $ADE_DEFAULT_VIEW_STORAGE_LOC" 1>&2
    fi

    echo "** Warning: Using non-standard ADE view storage: $GG_ADE_DEFAULT_VIEW_STORAGE_LOC" 1>&2

    if [ ! -d "$GG_ADE_DEFAULT_VIEW_STORAGE_LOC" ] ; then
      echo "** Creating ade work dir: $GG_ADE_DEFAULT_VIEW_STORAGE_LOC" 1>&2
      mkdir -p "$GG_ADE_DEFAULT_VIEW_STORAGE_LOC"

      if [ -d "$GG_ADE_DEFAULT_VIEW_STORAGE_LOC" ] ; then
        ADE_DEFAULT_VIEW_STORAGE_LOC=$GG_ADE_DEFAULT_VIEW_STORAGE_LOC
        ADE_DEFAULT_TWORK_STORAGE_LOC=${ADE_DEFAULT_VIEW_STORAGE_LOC%/*}/work
      else
        echo "** Error overriding ADE view storage. Using ADE_DEFAULT_VIEW_STORAGE_LOC=$ADE_DEFAULT_VIEW_STORAGE_LOC" 1>&2
      fi
    fi

    [ -d "$ADE_DEFAULT_TWORK_STORAGE_LOC" ] \
      && echo "** Creating ade twork dir: $ADE_DEFAULT_TWORK_STORAGE_LOC" 1>&2 \
      && mkdir -p "$ADE_DEFAULT_TWORK_STORAGE_LOC"

  else # unset GG_ADE_SHARE or set to 0 to disable any info about ADE
    if [ ! -d "$GG_ADE_DEFAULT_SHARE" ]; then
       [ "$GG_ADE_SHARE" = "1" -o "$GG_ADE_SHARE" = "0" ] \
         && echo "** Warning: ADE is not configured for this host. (GG_ADE_SHARE=$GG_ADE_SHARE)" 1>&2
    fi
  fi

  $quiet || _app_ade_printenv2

  $dbg && set +x
  return 0
}

##############################################################################
# use either lsview or lsviews (convenience / backward compat)
lsview()  { ade-lsview.sh "$@" ; }
lsviews() { ade-lsview.sh "$@" ; }

##############################################################################

: ${H_APP_ADE_ENV:=0}
: ${H_APP_ADE_DEBUG_ENV:=false}

if [ $H_APP_ADE_ENV -ge 1  -a "$h_os" != "cygwin" ] ; then
  $H_APP_ADE_DEBUG_ENV && printf "** bash completion for ade: already configured (count=$H_APP_ADE_ENV) ...\n"
else
  $H_APP_ADE_DEBUG_ENV && printf "** bash completion for ade...\n"
  [ -f $HOMEDIR_BIN/ade/bash_completion_ade ] && . $HOMEDIR_BIN/ade/bash_completion_ade >/dev/null 2>&1
  $H_APP_ADE_DEBUG_ENV && printf "** bash completion for ade: complete.\n"
  eval $( _app_ade_printenv )
  (( H_APP_ADE_ENV  = H_APP_ADE_ENV + 1 ))
  $H_APP_ADE_DEBUG_ENV && printf "** bash completion for ade: count updated (count=$H_APP_ADE_ENV)\n"
fi

# return true
:

