############################################################################
#  a few utils specific to gnu/linux....

############################################################################
# Recursive "diff" ignoring version control dirs.
# Usage: diffr [options...] dir1 dir2
#
# See also: diffi, sdiffi
#
diffr () {
   # other useful options:
   #   --side-by-side
  diff -r \
       --exclude="CVS"  \
       --exclude=".svn"  \
       --exclude=".git"  \
       --exclude=".hg"  \
       --exclude=".ade_path"  \
       "$@"
}

############################################################################
# diff, ignoring version control dirs + whitespace
# E.g., not unlike => alias idiff='diff -E -b -w -B'
#  diff -E (--ignore-tab-expansion)
#       -b (--ignore-space-change)
#       -w (--ignore-all-space)
#       -B (--ignore-blank-lines)
#  Could also:
#      --ignore-file-name-case
#      --ignore-matching-lines="^ *\* *" \  (C/C++ comments begin w/ "*")
#
diffi () {
    diffr \
       --ignore-tab-expansion \
       --ignore-space-change \
       --ignore-all-space \
       --ignore-blank-lines \
       "$@"
}


############################################################################
# Case-insensitive recursive side-by-side diff, ignoring VCS dirs.
# Like sdiff (diff -y [--left-column]), but 'diff' can be recursive
#
sdiffi() {
    diffi -y --left-column "$@"
}


############################################################################
# find, but ignore various RCS dirs (.svn, .git, CVS, etc) (portable version)
#
f () {
 local dirs=
 local def_cmd="-print"
 for x
 do    # iterate, until it looks like we have an option (starts w/ "-")
    [ "${x:0:1}" = "-" ] && break
    dirs="${dirs} ${x}"
    shift
 done

 [ $# -gt 0 ] && def_cmd=

 echo "## dirs to search: $dirs"
 echo "## remaining args ($#): $@"

 #  find ...  \( ! -regex ".*/\.[asg][dvi][ent].*" -a ! -regex ".*/CVS.*" \) "$@"
 echo "## find ${dirs:=.} \( \( -name .git -o -name .hg -o -name .ade_path -o -name .svn -o -name CVS \) -prune \) -o $@ $def_cmd"
 find ${dirs:=.} \( \( -name .git -o -name .hg -o -name .ade_path -o -name .svn -o -name CVS \) -prune \) -o "$@" $def_cmd
}

############################################################################
# findn (find-name), find a file of the given name using "find"
# usage:
#  findn [directory...] filename [-option1 etc -option2 etc...]
#
findn () {
  local dirs=
  for x
  do  # iterate, until an option (arg that starts w/ "-")
     [ "${x:0:1}" = "-" ] && break
     [ -d "${x}" ] && dirs="${dirs} ${x}" && shift
  done

  find ${dirs:=.} -name "$@" -print
}


############################################################################
# Search through jar files for a given pattern (ie, a filename).
# Usage: findj [paths|jars] pattern
# Examples:
#    find class in some pkg:   findj ~/.m2/repo*  ObjectFactory.class
#    find pkg name (from pwd)  findj javax/jmx
#    case insensitive:         findj -i javax/JMX
#    ..and "quiet" grep:       findj . -iq javax/JMX
#
findj () {
  local pattern
  local paths
  local opts

  [ $# -eq 0 ] && echo "usage: findj [paths] [pattern]" && return 2
  [ $# -eq 1 ] && paths=. && pattern="$@" && shift

  for x
  do
    [ "$#" -eq 1 ] && pattern="$@" && break
    [ "$x" = "--" ] && shift && pattern="$@" && break
    [ "${x:0:1}" = "-" ] && opts="$x" && shift && pattern="$@" && break
    paths="$paths $x" && shift
  done

  #  echo "for x in \$(find $paths -name *.jar -print)"
  for x in $(find $paths -name "*.jar" -print)
  do
     #echo ========= $x ===========
     unzip -l -qq "$x" | egrep $opts $pattern
     local found=$?
     [ $found -eq 0 ] && echo "FOUND: $x     $pattern"
  done
}


############################################################################
# finds - (find-string) find a string in a file using "find"
#  Usage: finds [search-dirs] [egrep-options] [pattern]
#  Example: finds include src -i "something"
#  Returns:
#     foo.c: SomeThing
#
finds () {
 local dirs=
 for x
 do   # iterate, until it looks like we have an option (starts w/ "-")
    [ "${x:0:1}" = "-" ] && break
    [ -d "${x}" ] && dirs="${dirs} ${x}" && shift
 done

 find ${dirs:=.} \( -type f -o -type l \) \( ! -name "*~" \) -exec egrep "$@" {} \; -print
}

# usage: finds [egrep-opts] searchstring
#function finds {
#  find . -type f -exec egrep "$@" {} \; -print ;
#}

############################################################################
# findsrc - run "find" for source files, doing an 'egrep' on all found files.
#  Usage: findsrc [search-dirs] [egrep-options] [pattern]
#  Example: findsrc include src -i "something"
#  Returns:
#     foo.c: SomeThing
#     Bar.java: someThing
#
findsrc () {
 local dirs=
 for x
 do   # iterate, until it looks like we have an option (starts w/ "-")
    [ "${x:0:1}" = "-" ] && break
    [ -d "${x}" -o -f "${x}" ] && dirs="${dirs} ${x}" && shift
 done

 find ${dirs:=.} \
     \( -type f -o -type l \) \( -name "*.java"       \
        -o -name "*.[chCH]"     \
        -o -name "*.cc"         \
        -o -name "*.CC"         \
        -o -name "*.cpp"        \
        -o -name "*.cxx"        \
        -o -name "*.xml"        \
        -o -name "*.props"      \
        -o -name "*.properties" \
        -o -name "*.prm"        \
        -o -name "*.gradle"     \
        -o -name "*.groovy"     \
        -o -name "*.clj"        \
        -o -name "*.cljs"       \
        -o -name "*.js"         \
        -o -name "*.jsp"        \
        -o -name "*.[cbk]sh"    \
        -o -name "*.sh"         \
        -o -name "*.bat"        \
        -o -name "*.sql"        \
        -o -name "*.rb"         \
        -o -name "*.py"         \
        -o -name "*.mk"         \
        -o -name "*.pom"         \
      \) -exec egrep "$@" {} \; -print
}

############################################################################
# usage: swap file1 file2
#    swap filenames: rename file1 to be file2, and vice-versa.
#
swap () {
  #echo "args:($#) $@"
  [ $# -ne 2 ] && echo "usage: swap file1 file2" && return 2
  local file1=$1
  local file2=$2
  local proc=$$
  echo swap file1=$file1 file2=$file2,  proc:$proc
  mv -i "${file1}" "${file1}.${proc}"
  mv -i "${file2}" "${file1}"
  mv -i "${file1}.${proc}" "${file2}"
}


############################################################################
# Enscript for pretty-printing source code. Puts output in pwd, naming file
# "out-" + first filename + ".ps" extension (strips path from filename).
#
# Options:
#   borders (-j), fancy headers (-G), syntax highlighting (-E, guess language),
#   2-up printing (--num=2, but don't use "-r" (landscape), set media=A4 for
#   better formatting), outputfile (-o) to the first filename + ".ps" extension.
#
# Use "ps2pdf" to create a pdf file, then run "pdfcrop file1.pdf file2.pdf"
# to shrink those big margins.
#
en () {
  local file1="${1}"
  local psfile="out-${file1##*/}.ps"
  enscript -j -G -E --media=A4 --nup=2 --line-numbers -o ${psfile} "$@" \
    && ps2pdf ${psfile} ${psfile}.pdf \
    && pdfcrop ${psfile}.pdf \
    && rm ${psfile} ${psfile}.pdf
}


# return true
:

